name: RAG Platform CI/CD (CPU-Only)

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch: # Allow manual triggering

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Code Quality and Testing
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: rag_platform
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install CPU-only dependencies
        run: |
          python -m pip install --upgrade pip
          # Install CPU-only PyTorch first
          pip install --no-cache-dir -r requirements-cpu.txt --index-url https://download.pytorch.org/whl/cpu
          # Install other dependencies
          pip install --no-cache-dir -e ".[dev,test]"

      - name: Run code formatting check (Black)
        run: black --check src/ tests/

      - name: Run import sorting check (isort)
        run: isort --check-only src/ tests/

      - name: Run linting (Ruff)
        run: ruff check src/ tests/

      - name: Run type checking (MyPy)
        run: mypy src/

      - name: Run tests with coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/rag_platform
          REDIS_URL: redis://localhost:6379
          ENVIRONMENT: test
        run: |
          pytest tests/ --cov=src --cov-report=xml --cov-report=html -v

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          verbose: true

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            coverage.xml
            htmlcov/
            .coverage

  # Job 2: Docker Build and Security Scan
  build-and-scan:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  # Job 3: Integration Tests with Docker Compose
  integration-test:
    runs-on: ubuntu-latest
    needs: build-and-scan
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull the built image
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Update docker-compose.yml with built image
        run: |
          sed -i "s|build: \.|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}|g" docker-compose.yml

      - name: Start services with Docker Compose
        run: |
          docker-compose up -d
          sleep 30 # Wait for services to be ready

      - name: Run integration tests
        run: |
          # Test health endpoint
          curl -f http://localhost:8000/health || exit 1

          # Test API endpoints
          curl -f http://localhost:8000/ || exit 1

          # Test LLM service endpoint
          curl -X POST http://localhost:8000/v1/generate \
            -H "Content-Type: application/json" \
            -d '{"query": "test", "context": []}' || exit 1

      - name: Stop services
        if: always()
        run: docker-compose down

  # Job 4: Deploy to Staging (if on develop branch)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, build-and-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying to staging environment..."
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          # Add your staging deployment commands here
          # Example: kubectl apply -f k8s/staging/
          # Example: docker-compose -f docker-compose.staging.yml up -d

  # Job 5: Deploy to Production (if on main branch)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, build-and-scan, integration-test]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production environment..."
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          # Add your production deployment commands here
          # Example: kubectl apply -f k8s/production/
          # Example: docker-compose -f docker-compose.prod.yml up -d

  # Job 6: Notify on completion
  notify:
    runs-on: ubuntu-latest
    needs: [test, build-and-scan]
    if: always()

    steps:
      - name: Notify on success
        if: needs.test.result == 'success' && needs.build-and-scan.result == 'success'
        run: |
          echo "‚úÖ All checks passed! Your CPU-only RAG Platform is ready."
          echo "üê≥ Docker image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"

      - name: Notify on failure
        if: needs.test.result == 'failure' || needs.build-and-scan.result == 'failure'
        run: |
          echo "‚ùå Some checks failed. Please review the logs."
          exit 1
